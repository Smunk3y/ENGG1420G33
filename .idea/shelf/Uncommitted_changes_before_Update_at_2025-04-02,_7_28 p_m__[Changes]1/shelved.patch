Index: ManagementSystem/src/main/java/com/example/phase1_1420/ExcelFile.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.phase1_1420;\n\nimport org.apache.poi.ss.usermodel.*;\n\nimport java.io.File;\nimport java.io.FileInputStream;\nimport java.io.FileOutputStream;\nimport java.io.IOException;\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class ExcelFile {\n    public List<Student> studentList = new ArrayList<>();\n    public List<Faculty> facultyList = new ArrayList<>();\n    public List<Event> eventList = new ArrayList<>();\n    public List<Subject> subjectList = new ArrayList<>();\n    public List<Course> courseList = new ArrayList<>();\n\n    //Write the subject's back to the excel file after edit in GUI\n    public void writeSubjectsToExcel(List<Subject> updatedSubjects) throws IOException {\n        File file = new File(\"src/main/resources/UMS_Data.xlsx\");\n        FileInputStream fis = new FileInputStream(file);\n        Workbook wb = WorkbookFactory.create(fis);\n        Sheet sheet = wb.getSheetAt(0); // Subjects in sheet 0\n\n        // Clear old data (except header)\n        for (int i = sheet.getLastRowNum(); i > 0; i--) {\n            Row row = sheet.getRow(i);\n            if (row != null) sheet.removeRow(row);\n        }\n\n        // Write updated subject list starting from row 1\n        int rowIndex = 1;\n        for (Subject subject : updatedSubjects) {\n            Row row = sheet.createRow(rowIndex++);\n            Cell codeCell = row.createCell(0);\n            Cell nameCell = row.createCell(1);\n\n\n            codeCell.setCellValue(subject.getCode());\n            nameCell.setCellValue(subject.getName());\n        }\n\n        fis.close();\n\n        // Save changes\n        FileOutputStream fos = new FileOutputStream(file);\n        wb.write(fos);\n        fos.close();\n        wb.close();\n    }\n\n    //Write Courses to excel\n    public void writeCoursesToExcel(List<Course> updatedCourses) throws IOException {\n        File file = new File(\"UMS_Data.xlsx\");\n        FileInputStream fis = new FileInputStream(file);\n        Workbook wb = WorkbookFactory.create(fis);\n        Sheet sheet = wb.getSheetAt(1); // Subjects in sheet 0\n\n        // Clear old data (except header)\n        for (int i = sheet.getLastRowNum(); i > 0; i--) {\n            Row row = sheet.getRow(i);\n            if (row != null) sheet.removeRow(row);\n        }\n\n        // Write updated subject list starting from row 1\n        int rowIndex = 1;\n        for (Course course : updatedCourses) {\n            Row row = sheet.createRow(rowIndex++);\n\n            Cell codeCell = row.createCell(0);\n            Cell nameCell = row.createCell(1);\n            Cell subjectCodeCell = row.createCell(2);\n            Cell sectionCell = row.createCell(3);\n            Cell capacityCell = row.createCell(4);\n            Cell lectureTimeCell = row.createCell(5);\n            Cell finalTimeCell = row.createCell(6);\n            Cell locationCell = row.createCell(7);\n            Cell teacherCell = row.createCell(8);\n\n            codeCell.setCellValue(course.getCourseCode());\n            nameCell.setCellValue(course.getCourseName());\n            subjectCodeCell.setCellValue(course.getCode());\n            sectionCell.setCellValue(course.getSectionNumber());\n            capacityCell.setCellValue(course.getCapacity());\n            lectureTimeCell.setCellValue(course.getLectureTime());\n            finalTimeCell.setCellValue(course.getFinalExamDateTime());\n            locationCell.setCellValue(course.getLocation());\n            teacherCell.setCellValue(course.getTeacherName());\n        }\n\n        fis.close();\n\n        // Save changes\n        FileOutputStream fos = new FileOutputStream(file);\n        wb.write(fos);\n        fos.close();\n        wb.close();\n    }\n\n    //Write Students to excel\n    public void writeStudentsToExcel(List<Student> updatedStudents) throws IOException {\n        File file = new File(\"UMS_Data.xlsx\");\n        FileInputStream fis = new FileInputStream(file);\n        Workbook wb = WorkbookFactory.create(fis);\n        Sheet sheet = wb.getSheetAt(2); // Subjects in sheet 0\n\n        // Clear old data (except header)\n        for (int i = sheet.getLastRowNum(); i > 0; i--) {\n            Row row = sheet.getRow(i);\n            if (row != null) sheet.removeRow(row);\n        }\n\n        // Write updated subject list starting from row 1\n        int rowIndex = 1;\n        for (Student student : updatedStudents) {\n            Row row = sheet.createRow(rowIndex++);\n\n            Cell idCell = row.createCell(0);\n            Cell userCell = row.createCell(1);\n            Cell addressCell = row.createCell(2);\n            Cell telephoneCell = row.createCell(3);\n            Cell emailCell = row.createCell(4);\n            Cell academicLevelCell = row.createCell(5);\n            Cell semesterCell = row.createCell(6);\n            Cell photoCell = row.createCell(7);\n            Cell subjectsCell = row.createCell(8);\n            Cell thesisTitleCell = row.createCell(9);\n            Cell progressCell = row.createCell(10);\n            Cell passCell = row.createCell(11);\n\n            idCell.setCellValue(student.getId());\n            userCell.setCellValue(student.getUsername());\n            addressCell.setCellValue(student.getAddress());\n            telephoneCell.setCellValue(student.getTelephone());\n            emailCell.setCellValue(student.getEmail());\n            academicLevelCell.setCellValue(student.getAcademicLevel());\n            semesterCell.setCellValue(student.getCurrentSem());\n            photoCell.setCellValue(\"default\");\n            subjectsCell.setCellValue(student.getSubjects());\n            thesisTitleCell.setCellValue(student.getThesisTitle());\n            progressCell.setCellValue(student.getProgress());\n            passCell.setCellValue(student.getPassword());\n\n        }\n\n        fis.close();\n\n        // Save changes\n        FileOutputStream fos = new FileOutputStream(file);\n        wb.write(fos);\n        fos.close();\n        wb.close();\n    }\n\n\n\n    //Write Faculty to excel\n    public void writeFacultyToExcel(List<Faculty> updatedFaculty) throws IOException {\n        File file = new File(\"UMS_Data.xlsx\");\n        FileInputStream fis = new FileInputStream(file);\n        Workbook wb = WorkbookFactory.create(fis);\n        Sheet sheet = wb.getSheetAt(3);\n\n        // Clear old data (except header)\n        for (int i = sheet.getLastRowNum(); i > 0; i--) {\n            Row row = sheet.getRow(i);\n            if (row != null) sheet.removeRow(row);\n        }\n\n        // Write updated subject list starting from row 1\n        int rowIndex = 1;\n        for (Faculty faculty : updatedFaculty) {\n            Row row = sheet.createRow(rowIndex++);\n\n            Cell idCell = row.createCell(0);\n            Cell userCell = row.createCell(1);\n            Cell degreeCell = row.createCell(2);\n            Cell researchCell = row.createCell(3);\n            Cell emailCell = row.createCell(4);\n            Cell officeCell = row.createCell(5);\n            Cell coursesCell = row.createCell(6);\n            Cell passCell = row.createCell(7);\n\n            idCell.setCellValue(faculty.getId());\n            userCell.setCellValue(faculty.getUsername());\n            degreeCell.setCellValue(faculty.getDegree());\n            researchCell.setCellValue(faculty.getResearchInterest());\n            emailCell.setCellValue(faculty.getEmail());\n            officeCell.setCellValue(faculty.getOfficeLocation());\n            coursesCell.setCellValue(faculty.getCoursesOffered());\n            passCell.setCellValue(faculty.getPassword());\n\n        }\n\n        fis.close();\n\n        // Save changes\n        FileOutputStream fos = new FileOutputStream(file);\n        wb.write(fos);\n        fos.close();\n        wb.close();\n    }\n\n    //Write the Event's back to the excel file after edit in GUI\n    public void writeEventsToExcel(List<Event> updatedEvents) throws IOException {\n        File file = new File(\"UMS_Data.xlsx\");\n        FileInputStream fis = new FileInputStream(file);\n        Workbook wb = WorkbookFactory.create(fis);\n        Sheet sheet = wb.getSheetAt(4); // Subjects in sheet 0\n\n        // Clear old data (except header)\n        for (int i = sheet.getLastRowNum(); i > 0; i--) {\n            Row row = sheet.getRow(i);\n            if (row != null) sheet.removeRow(row);\n        }\n\n        // Write updated subject list starting from row 1\n        int rowIndex = 1;\n        for (Event event : updatedEvents) {\n            Row row = sheet.createRow(rowIndex++);\n\n            Cell idCell = row.createCell(0);\n            Cell nameCell = row.createCell(1);\n            Cell descriptionCell = row.createCell(2);\n            Cell locationCell = row.createCell(3);\n            Cell dateTimeCell = row.createCell(4);\n            Cell capacityCell = row.createCell(5);\n            Cell costCell = row.createCell(6);\n            Cell photoCell = row.createCell(7);\n            Cell registeredStudentsCell = row.createCell(8);\n\n            idCell.setCellValue(event.getEventID());\n            nameCell.setCellValue(event.getEventID());\n            descriptionCell.setCellValue(event.getDescription());\n            locationCell.setCellValue(event.getLocation());\n            dateTimeCell.setCellValue(event.getDateTime()); // Assumed as string or formatted\n            capacityCell.setCellValue(event.getCapacity());\n            costCell.setCellValue(event.getCost());\n            photoCell.setCellValue(\"default\"); //PHOTO\n            registeredStudentsCell.setCellValue(event.getRegisteredStudents());\n        }\n\n        fis.close();\n\n        // Save changes\n        FileOutputStream fos = new FileOutputStream(file);\n        wb.write(fos);\n        fos.close();\n        wb.close();\n    }\n\n    //Read all new data, from all sheets whenever reading\n    public void ReadingNameExcelFile() throws IOException {\n        File file = new File(\"/Users/keanurangayah/Downloads/JAVALAbs/ENGG1420G33/ManagementSystem/src/main/java/com/example/phase1_1420/UMS_Data.xlsx\");\n        FileInputStream fis = new FileInputStream(file);\n        Workbook wb = WorkbookFactory.create(fis);\n\n\n        // Finding Students In sheet 2\n        Sheet sheet = wb.getSheetAt(2);\n        studentList.clear();\n        for (int i = 1; i <= sheet.getLastRowNum(); i++) {\n\n            Row row = sheet.getRow(i);\n            if (row == null) continue;\n\n            Cell idCell = row.getCell(0, Row.MissingCellPolicy.RETURN_BLANK_AS_NULL);\n            Cell userCell = row.getCell(1, Row.MissingCellPolicy.RETURN_BLANK_AS_NULL);\n            Cell adressCell = row.getCell(2, Row.MissingCellPolicy.RETURN_BLANK_AS_NULL);\n            Cell telephoneCell = row.getCell(3, Row.MissingCellPolicy.RETURN_BLANK_AS_NULL);\n            Cell emailCell = row.getCell(4, Row.MissingCellPolicy.RETURN_BLANK_AS_NULL);\n            Cell academicLevelCell = row.getCell(5, Row.MissingCellPolicy.RETURN_BLANK_AS_NULL);\n            Cell semesterCell = row.getCell(6, Row.MissingCellPolicy.RETURN_BLANK_AS_NULL);\n            Cell subjectsCell = row.getCell(8, Row.MissingCellPolicy.RETURN_BLANK_AS_NULL);\n            Cell thesisTitleCell = row.getCell(9, Row.MissingCellPolicy.RETURN_BLANK_AS_NULL);\n            Cell progressCell = row.getCell(10, Row.MissingCellPolicy.RETURN_BLANK_AS_NULL);\n            Cell passCell = row.getCell(11, Row.MissingCellPolicy.RETURN_BLANK_AS_NULL);\n\n\n            if (idCell != null) {\n                System.out.println(\"\\nReading student from Excel:\");\n                System.out.println(\"- ID: \" + idCell.toString());\n                System.out.println(\"- Name: \" + userCell.toString());\n                System.out.println(\"- Raw Subjects Cell: '\" + (subjectsCell != null ? subjectsCell.toString() : \"null\") + \"'\");\n                \n                double progress = 0.0;\n                try {\n                    if (progressCell != null) {\n                        progress = Double.parseDouble(progressCell.toString());\n                    }\n                } catch (NumberFormatException e) {\n                    System.out.println(\"Warning: Invalid progress value for student \" + idCell.toString() + \". Setting to 0.\");\n                    progress = 0.0;\n                }\n                \n                Student student = new Student(idCell.toString(), passCell.toString(), userCell.toString(), emailCell.toString(), adressCell.toString(),\n                        telephoneCell.toString(), academicLevelCell.toString(),semesterCell.toString(), subjectsCell.toString(), thesisTitleCell.toString(), progress);\n                studentList.add(student);\n                \n                // Debug: Print the student's subjects after creation\n                System.out.println(\"- Processed Subjects: '\" + student.getSubjects() + \"'\");\n            }\n        }\n\n        // Finding Students In sheet 2\n        sheet = wb.getSheetAt(3);\n        facultyList.clear();\n        for (int i = 1; i <= sheet.getLastRowNum(); i++) {\n\n            Row row = sheet.getRow(i);\n            if (row == null) continue;\n\n            Cell idCell = row.getCell(0, Row.MissingCellPolicy.RETURN_BLANK_AS_NULL);\n            Cell userCell = row.getCell(1, Row.MissingCellPolicy.RETURN_BLANK_AS_NULL);\n            Cell degreeCell = row.getCell(2, Row.MissingCellPolicy.RETURN_BLANK_AS_NULL);\n            Cell researchCell =row.getCell(3, Row.MissingCellPolicy.RETURN_BLANK_AS_NULL);\n            Cell emailCell =row.getCell(4, Row.MissingCellPolicy.RETURN_BLANK_AS_NULL);\n            Cell officeCell = row.getCell(5, Row.MissingCellPolicy.RETURN_BLANK_AS_NULL);\n            Cell coursesCell = row.getCell(6, Row.MissingCellPolicy.RETURN_BLANK_AS_NULL);\n            Cell passCell = row.getCell(7, Row.MissingCellPolicy.RETURN_BLANK_AS_NULL);\n\n\n            if (idCell != null) {\n                Faculty faculty = new Faculty(idCell.toString(),passCell.toString(),userCell.toString(),emailCell.toString(), degreeCell.toString()\n                , researchCell.toString(), officeCell.toString(), coursesCell.toString());\n                facultyList.add(faculty);\n            }\n        }\n\n        sheet = wb.getSheetAt(4);\n        eventList.clear();\n        for (int i = 1; i <= sheet.getLastRowNum(); i++) {\n\n            Row row = sheet.getRow(i);\n            if (row == null) continue;\n\n            Cell idCell = row.getCell(0, Row.MissingCellPolicy.RETURN_BLANK_AS_NULL);\n            Cell nameCell = row.getCell(1, Row.MissingCellPolicy.RETURN_BLANK_AS_NULL);\n            Cell descriptionCell = row.getCell(2, Row.MissingCellPolicy.RETURN_BLANK_AS_NULL);\n            Cell locationCell =row.getCell(3, Row.MissingCellPolicy.RETURN_BLANK_AS_NULL);\n            Cell dateTimeCell =row.getCell(4, Row.MissingCellPolicy.RETURN_BLANK_AS_NULL);\n            Cell capacityCell = row.getCell(5, Row.MissingCellPolicy.RETURN_BLANK_AS_NULL);\n            Cell costCell = row.getCell(6, Row.MissingCellPolicy.RETURN_BLANK_AS_NULL);\n            Cell registeredStudentsCell = row.getCell(8, Row.MissingCellPolicy.RETURN_BLANK_AS_NULL);\n\n            if (idCell != null) {\n                Event event = new Event(idCell.toString(), nameCell.toString(), descriptionCell.toString(), locationCell.toString(),\n                        dateTimeCell.toString(),Double.parseDouble(capacityCell.toString()), costCell.toString(), registeredStudentsCell.toString());\n                eventList.add(event);\n            }\n        }\n\n        sheet = wb.getSheetAt(0);\n        subjectList.clear();\n        for (int i = 1; i <= sheet.getLastRowNum(); i++) {\n\n            Row row = sheet.getRow(i);\n            if (row == null) continue;\n\n            //Wont enter Blank Cells into the object\n            Cell idCell = row.getCell(0, Row.MissingCellPolicy.RETURN_BLANK_AS_NULL);\n            Cell passCell = row.getCell(1, Row.MissingCellPolicy.RETURN_BLANK_AS_NULL);\n\n\n            if (idCell != null) {\n                Subject subject = new Subject(idCell.toString(),passCell.toString());\n                subjectList.add(subject);\n            }\n        }\n\n        sheet = wb.getSheetAt(1);\n        courseList.clear();\n        System.out.println(\"Reading courses from Excel...\");\n        for (int i = 1; i <= sheet.getLastRowNum(); i++) {\n\n            Row row = sheet.getRow(i);\n            if (row == null) continue;\n\n            //Wont enter Blank Cells into the object\n            Cell courseCodecell = row.getCell(0, Row.MissingCellPolicy.RETURN_BLANK_AS_NULL);\n            Cell courseNameCell = row.getCell(1, Row.MissingCellPolicy.RETURN_BLANK_AS_NULL);\n            Cell subjectCodeCell = row.getCell(2, Row.MissingCellPolicy.RETURN_BLANK_AS_NULL);\n            Cell sectionNumberCell = row.getCell(3, Row.MissingCellPolicy.RETURN_BLANK_AS_NULL);\n            Cell CapacityCell = row.getCell(4, Row.MissingCellPolicy.RETURN_BLANK_AS_NULL);\n            Cell lectureTimeCell = row.getCell(5, Row.MissingCellPolicy.RETURN_BLANK_AS_NULL);\n            Cell finalTimeCell = row.getCell(6, Row.MissingCellPolicy.RETURN_BLANK_AS_NULL);\n            Cell locationCell = row.getCell(7, Row.MissingCellPolicy.RETURN_BLANK_AS_NULL);\n            Cell teacherCell = row.getCell(8, Row.MissingCellPolicy.RETURN_BLANK_AS_NULL);\n\n\n            if (courseCodecell != null) {\n                System.out.println(\"Found course: \" + courseNameCell.toString() + \" with subject code: \" + subjectCodeCell.toString());\n                Course course = new Course(courseCodecell.toString(), courseNameCell.toString(), subjectCodeCell.toString(), sectionNumberCell.toString(), Double.parseDouble(CapacityCell.toString()),\n                        lectureTimeCell.toString(), finalTimeCell.toString(), locationCell.toString(), teacherCell.toString());\n                courseList.add(course);\n            }\n        }\n        System.out.println(\"Total courses read from Excel: \" + courseList.size());\n\n        wb.close();\n        fis.close();\n    }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/ManagementSystem/src/main/java/com/example/phase1_1420/ExcelFile.java b/ManagementSystem/src/main/java/com/example/phase1_1420/ExcelFile.java
--- a/ManagementSystem/src/main/java/com/example/phase1_1420/ExcelFile.java	(revision 4ab3861f692e7ff3f39550df4fdd3fca57265463)
+++ b/ManagementSystem/src/main/java/com/example/phase1_1420/ExcelFile.java	(date 1743632032635)
@@ -295,7 +295,7 @@
                 }
                 
                 Student student = new Student(idCell.toString(), passCell.toString(), userCell.toString(), emailCell.toString(), adressCell.toString(),
-                        telephoneCell.toString(), academicLevelCell.toString(),semesterCell.toString(), subjectsCell.toString(), thesisTitleCell.toString(), progress);
+                        telephoneCell.toString(), academicLevelCell.toString(),semesterCell.toString(), subjectsCell.toString(), thesisTitleCell.toString(), progress, thesisTitleCell.toString());
                 studentList.add(student);
                 
                 // Debug: Print the student's subjects after creation
Index: ManagementSystem/src/main/java/com/example/phase1_1420/Student.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.phase1_1420;\n\npublic class Student extends User{\n\n    protected String address;\n    protected String telephone;\n    protected String academicLevel;\n    protected String currentSem;\n    protected String subjects;\n    protected String thesisTitle;\n    protected double progress;\n\n\n    public Student(String id, String password, String username, String email, String address, String telephone,\n                   String academicLevel, String currentSem, String subjects, String thesisTitle, double progress) {\n        super(id, password,username, \"USER\", email);\n        this.address = address;\n        this.telephone = telephone;\n        this.academicLevel = academicLevel;\n        this.currentSem = currentSem;\n        this.subjects = subjects;\n        this.thesisTitle = thesisTitle;\n        this.progress = progress * 100;\n    }\n\n    public String getAddress() {\n        return address;\n    }\n\n    public void setAddress(String address) {\n        this.address = address;\n    }\n\n    public String getTelephone() {\n        return telephone;\n    }\n\n    public void setTelephone(String telephone) {\n        this.telephone = telephone;\n    }\n\n    public String getAcademicLevel() {\n        return academicLevel;\n    }\n\n    public void setAcademicLevel(String academicLevel) {\n        this.academicLevel = academicLevel;\n    }\n\n    public String getCurrentSem() {\n        return currentSem;\n    }\n\n    public void setCurrentSem(String currentSem) {\n        this.currentSem = currentSem;\n    }\n\n    public String getSubjects() {\n        return subjects;\n    }\n\n    public void setSubjects(String subjects) {\n        this.subjects = subjects;\n    }\n\n    public String getThesisTitle() {\n        return thesisTitle;\n    }\n\n    public void setThesisTitle(String thesisTitle) {\n        this.thesisTitle = thesisTitle;\n    }\n\n    public double getProgress() {\n        return progress;\n    }\n\n    public void setProgress(double progress) {\n        this.progress = (double) (progress * 100);\n    }\n\n    @Override\n    public String toString() {\n        return \"Username: \" + username +\n                \" | StudentID: \" + id +\n                \" | Password: \" + password +\n                \" | Role: \" + role +\n                \" | Email: \" + email +\n                \" | Address: \" + address +\n                \" | Telephone: \" + telephone +\n                \" | Academic Level: \" + academicLevel +\n                \" | Current Semester: \" + currentSem +\n                \" | Subjects: \" + subjects +\n                \" | Thesis Title: \" + thesisTitle +\n                \" | Progress: \" + progress + \"%\";\n    }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/ManagementSystem/src/main/java/com/example/phase1_1420/Student.java b/ManagementSystem/src/main/java/com/example/phase1_1420/Student.java
--- a/ManagementSystem/src/main/java/com/example/phase1_1420/Student.java	(revision 4ab3861f692e7ff3f39550df4fdd3fca57265463)
+++ b/ManagementSystem/src/main/java/com/example/phase1_1420/Student.java	(date 1743578934665)
@@ -9,10 +9,12 @@
     protected String subjects;
     protected String thesisTitle;
     protected double progress;
+    protected String email;
+    protected String thesis;
 
 
     public Student(String id, String password, String username, String email, String address, String telephone,
-                   String academicLevel, String currentSem, String subjects, String thesisTitle, double progress) {
+                   String academicLevel, String currentSem, String subjects, String thesisTitle, double progress, String thesis) {
         super(id, password,username, "USER", email);
         this.address = address;
         this.telephone = telephone;
@@ -21,6 +23,8 @@
         this.subjects = subjects;
         this.thesisTitle = thesisTitle;
         this.progress = progress * 100;
+        this.email = email;
+        this.thesis = thesis;
     }
 
     public String getAddress() {
@@ -79,6 +83,22 @@
         this.progress = (double) (progress * 100);
     }
 
+    public String getEmail() {
+        return email;
+    }
+
+    public void setEmail(String email) {
+        this.email = email;
+    }
+
+    public String getThesis() {
+        return thesis;
+    }
+
+    public void setThesis(String thesis) {
+        this.thesis = thesis;
+    }
+
     @Override
     public String toString() {
         return "Username: " + username +
Index: ManagementSystem/src/main/java/com/example/phase1_1420/UserDashboardViewController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.phase1_1420;\n\nimport javafx.fxml.FXML;\nimport javafx.fxml.Initializable;\nimport javafx.scene.control.*;\nimport javafx.scene.text.Text;\nimport javafx.collections.FXCollections;\nimport javafx.collections.ObservableList;\nimport javafx.beans.property.SimpleStringProperty;\nimport java.net.URL;\nimport java.util.ResourceBundle;\nimport java.time.LocalDate;\nimport java.time.format.DateTimeFormatter;\n\npublic class UserDashboardViewController implements Initializable {\n    @FXML private Text studentNameText;\n    @FXML private Text studentIdText;\n    @FXML private Text academicLevelText;\n    @FXML private Text currentSemText;\n    @FXML private Text graduationDateText;\n    @FXML private ProgressBar progressBar;\n    @FXML private Label progressLabel;\n    \n    @FXML private TableView<Course> coursesTable;\n    @FXML private TableColumn<Course, String> courseCodeColumn;\n    @FXML private TableColumn<Course, String> courseNameColumn;\n    @FXML private TableColumn<Course, String> instructorColumn;\n    @FXML private TableColumn<Course, String> scheduleColumn;\n    \n    @FXML private TableView<Event> eventsTable;\n    @FXML private TableColumn<Event, String> eventNameColumn;\n    @FXML private TableColumn<Event, String> eventDateColumn;\n    @FXML private TableColumn<Event, String> eventLocationColumn;\n\n    private final ExcelFile excelReader = new ExcelFile();\n    private Student currentStudent;\n\n    @Override\n    public void initialize(URL location, ResourceBundle resources) {\n        try {\n            System.out.println(\"\\n=== Initializing UserDashboardViewController ===\");\n            \n            // Load data from Excel\n            excelReader.ReadingNameExcelFile();\n            \n            // Get current student from UserDatabase\n            currentStudent = (Student) UserDatabase.CurrentUser;\n            System.out.println(\"Current Student:\");\n            System.out.println(\"- ID: \" + currentStudent.getId());\n            System.out.println(\"- Name: \" + currentStudent.getUsername());\n            System.out.println(\"- Academic Level: \" + currentStudent.getAcademicLevel());\n            System.out.println(\"- Current Semester: \" + currentStudent.getCurrentSem());\n            System.out.println(\"- Subjects: \" + currentStudent.getSubjects());\n            \n            // Initialize table columns\n            initializeColumns();\n            \n            // Update UI with student information\n            updateStudentInfo();\n            \n            // Load tables with data\n            loadCoursesTable();\n            loadEventsTable();\n        } catch (Exception e) {\n            System.err.println(\"Error in initialize: \" + e.getMessage());\n            e.printStackTrace();\n        }\n    }\n\n    private void initializeColumns() {\n        // Courses table\n        courseCodeColumn.setCellValueFactory(cellData -> \n            new SimpleStringProperty(cellData.getValue().getCourseCode()));\n        courseNameColumn.setCellValueFactory(cellData -> \n            new SimpleStringProperty(cellData.getValue().getCourseName()));\n        instructorColumn.setCellValueFactory(cellData -> \n            new SimpleStringProperty(cellData.getValue().getTeacherName()));\n        scheduleColumn.setCellValueFactory(cellData -> \n            new SimpleStringProperty(cellData.getValue().getLectureTime()));\n\n        // Events table\n        eventNameColumn.setCellValueFactory(cellData -> \n            new SimpleStringProperty(cellData.getValue().getEventName()));\n        eventDateColumn.setCellValueFactory(cellData -> \n            new SimpleStringProperty(cellData.getValue().getDateTime()));\n        eventLocationColumn.setCellValueFactory(cellData -> \n            new SimpleStringProperty(cellData.getValue().getLocation()));\n    }\n\n    private void updateStudentInfo() {\n        studentNameText.setText(currentStudent.getUsername());\n        studentIdText.setText(currentStudent.getId());\n        academicLevelText.setText(currentStudent.getAcademicLevel());\n        currentSemText.setText(currentStudent.getCurrentSem());\n        graduationDateText.setText(calculateGraduationDate());\n        \n        // Set progress to 0%\n        progressBar.setProgress(0.0);\n        progressLabel.setText(\"0.0% Complete\");\n    }\n\n    private String calculateGraduationDate() {\n        String academicLevel = currentStudent.getAcademicLevel();\n        int currentLevel;\n        \n        // Convert academic level text to number\n        switch (academicLevel.toLowerCase()) {\n            case \"freshman\":\n                currentLevel = 1;\n                break;\n            case \"sophomore\":\n                currentLevel = 2;\n                break;\n            case \"junior\":\n                currentLevel = 3;\n                break;\n            case \"senior\":\n                currentLevel = 4;\n                break;\n            default:\n                currentLevel = 1; // Default to freshman if unknown\n        }\n        \n        // Parse semester string (e.g., \"Fall 2025\")\n        String currentSemStr = currentStudent.getCurrentSem();\n        int currentSem;\n        if (currentSemStr.toLowerCase().contains(\"fall\")) {\n            currentSem = 1;\n        } else if (currentSemStr.toLowerCase().contains(\"spring\")) {\n            currentSem = 2;\n        } else {\n            currentSem = 1; // Default to Fall if unknown\n        }\n        \n        int remainingSemesters = (4 - currentLevel) * 2 + (2 - currentSem);\n        \n        // Assuming 4 months per semester\n        int monthsUntilGraduation = remainingSemesters * 4;\n        LocalDate graduationDate = LocalDate.now().plusMonths(monthsUntilGraduation);\n        \n        return graduationDate.format(DateTimeFormatter.ofPattern(\"MMMM yyyy\"));\n    }\n\n    private void loadCoursesTable() {\n        // Get the student's subjects string from the current student object\n        String studentSubjectsStr = currentStudent.getSubjects();\n        System.out.println(\"\\n=== Course Loading Debug ===\");\n        System.out.println(\"Student ID: \" + currentStudent.getId());\n        System.out.println(\"Raw Subjects String: '\" + studentSubjectsStr + \"'\");\n        \n        // Create an observable list to hold the enrolled courses\n        ObservableList<Course> enrolledCourses = FXCollections.observableArrayList();\n        \n        // Check if the student has any subjects registered\n        if (studentSubjectsStr == null || studentSubjectsStr.trim().isEmpty()) {\n            System.out.println(\"WARNING: Student has no subjects registered!\");\n            coursesTable.setItems(enrolledCourses);\n            return;\n        }\n        \n        // Split the subjects string into an array and clean each subject\n        // Convert all subjects to uppercase for consistent case-insensitive comparison\n        String[] studentSubjects = studentSubjectsStr.split(\",\");\n        for (int i = 0; i < studentSubjects.length; i++) {\n            studentSubjects[i] = studentSubjects[i].trim().toUpperCase();\n        }\n        \n        // Print total number of available courses for debugging\n        System.out.println(\"Total Courses Available: \" + excelReader.courseList.size());\n        \n        // Debug: Print all available courses with their details\n        System.out.println(\"\\nAvailable Courses:\");\n        for (Course course : excelReader.courseList) {\n            System.out.println(\"- \" + course.getCourseName() + \n                             \"\\n  Course Code: '\" + course.getCourseCode() + \"'\" +\n                             \"\\n  Subject Code: '\" + course.getCode() + \"'\");\n        }\n        \n        // Debug: Print the student's subjects after cleaning\n        System.out.println(\"\\nStudent's Subjects:\");\n        for (String subject : studentSubjects) {\n            if (!subject.trim().isEmpty()) {\n                System.out.println(\"- '\" + subject + \"'\");\n            }\n        }\n        \n        // Create a set to keep track of processed subjects to avoid duplicates\n        java.util.Set<String> processedSubjects = new java.util.HashSet<>();\n        \n        // First pass: Match existing courses with student's subjects\n        for (Course course : excelReader.courseList) {\n            // Convert course's subject code to uppercase for consistent comparison\n            String subjectCode = course.getCode().trim().toUpperCase();\n            System.out.println(\"\\nChecking course: \" + course.getCourseName());\n            System.out.println(\"Subject code: '\" + subjectCode + \"'\");\n            \n            boolean courseMatched = false;\n            // Check each of the student's subjects\n            for (String studentSubject : studentSubjects) {\n                if (studentSubject.isEmpty()) continue;\n                \n                System.out.println(\"Comparing with student subject: '\" + studentSubject + \"'\");\n                \n                // Check for exact match (after converting to uppercase)\n                if (subjectCode.equals(studentSubject)) {\n                    // Only add the course if we haven't processed this subject code before\n                    if (!processedSubjects.contains(subjectCode)) {\n                        System.out.println(\"✓ Exact match found! Adding course: \" + course.getCourseName());\n                        // Create a new course entry using the student's subject code\n                        Course matchedCourse = new Course(\n                            studentSubject,  // Use student's subject code as course code\n                            course.getCourseName(),\n                            studentSubject,\n                            course.getSectionNumber(),\n                            Double.parseDouble(course.getCapacity()),  // Convert String capacity to double\n                            course.getLectureTime(),\n                            course.getFinalExamDateTime(),\n                            course.getLocation(),\n                            course.getTeacherName()\n                        );\n                        enrolledCourses.add(matchedCourse);\n                        processedSubjects.add(subjectCode);  // Mark this subject as processed\n                        courseMatched = true;\n                        break;\n                    }\n                }\n            }\n            \n            if (!courseMatched) {\n                System.out.println(\"No match found for this course\");\n            }\n        }\n        \n        // Second pass: Handle subjects that don't have corresponding courses\n        for (String studentSubject : studentSubjects) {\n            if (studentSubject.trim().isEmpty()) continue;\n            \n            // Check if we already have a course for this subject\n            boolean hasCorrespondingCourse = false;\n            for (Course course : enrolledCourses) {\n                if (course.getCode().trim().toUpperCase().equals(studentSubject)) {\n                    hasCorrespondingCourse = true;\n                    break;\n                }\n            }\n            \n            // If no course exists for this subject, look for it in the subject list\n            if (!hasCorrespondingCourse) {\n                for (Subject subject : excelReader.subjectList) {\n                    if (subject.getCode().trim().toUpperCase().equals(studentSubject)) {\n                        System.out.println(\"\\nFound subject without course: \" + subject.getName() + \" (\" + subject.getCode() + \")\");\n                        // Create a basic course entry with minimal information\n                        Course basicCourse = new Course(\n                            studentSubject,  // Use student's subject code as course code\n                            subject.getName(),  // Use subject name as course name\n                            studentSubject,  // Use student's subject code\n                            \"N/A\",  // No section number available\n                            0.0,    // No capacity information\n                            \"N/A\",  // No lecture time available\n                            \"N/A\",  // No final exam date available\n                            \"N/A\",  // No location available\n                            \"N/A\"   // No teacher information available\n                        );\n                        enrolledCourses.add(basicCourse);\n                        processedSubjects.add(studentSubject);  // Mark this subject as processed\n                        System.out.println(\"✓ Added basic course entry for: \" + subject.getName());\n                        break;\n                    }\n                }\n            }\n        }\n        \n        // Print final results and any warnings\n        System.out.println(\"\\nTotal enrolled courses: \" + enrolledCourses.size());\n        if (enrolledCourses.isEmpty()) {\n            System.out.println(\"WARNING: No courses were matched!\");\n            System.out.println(\"This could be because:\");\n            System.out.println(\"1. The student's subjects are not in the correct format\");\n            System.out.println(\"2. The course subject codes don't match the student's subjects\");\n            System.out.println(\"3. There might be extra spaces or case differences\");\n        }\n        \n        // Update the courses table with the final list of courses\n        coursesTable.setItems(enrolledCourses);\n    }\n\n    private void loadEventsTable() {\n        // Filter events based on student's registration\n        ObservableList<Event> registeredEvents = FXCollections.observableArrayList();\n        String studentId = currentStudent.getId();\n        \n        for (Event event : excelReader.eventList) {\n            if (event.getRegisteredStudents().contains(studentId)) {\n                registeredEvents.add(event);\n            }\n        }\n        \n        eventsTable.setItems(registeredEvents);\n    }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/ManagementSystem/src/main/java/com/example/phase1_1420/UserDashboardViewController.java b/ManagementSystem/src/main/java/com/example/phase1_1420/UserDashboardViewController.java
--- a/ManagementSystem/src/main/java/com/example/phase1_1420/UserDashboardViewController.java	(revision 4ab3861f692e7ff3f39550df4fdd3fca57265463)
+++ b/ManagementSystem/src/main/java/com/example/phase1_1420/UserDashboardViewController.java	(date 1743581262086)
@@ -17,10 +17,15 @@
     @FXML private Text studentIdText;
     @FXML private Text academicLevelText;
     @FXML private Text currentSemText;
-    @FXML private Text graduationDateText;
     @FXML private ProgressBar progressBar;
     @FXML private Label progressLabel;
     
+    // New FXML fields for additional student information
+    @FXML private Text addressText;
+    @FXML private Text telephoneText;
+    @FXML private Text emailText;
+    @FXML private Text thesisText;
+    
     @FXML private TableView<Course> coursesTable;
     @FXML private TableColumn<Course, String> courseCodeColumn;
     @FXML private TableColumn<Course, String> courseNameColumn;
@@ -88,57 +93,29 @@
     }
 
     private void updateStudentInfo() {
+        // Update basic student information
         studentNameText.setText(currentStudent.getUsername());
         studentIdText.setText(currentStudent.getId());
         academicLevelText.setText(currentStudent.getAcademicLevel());
         currentSemText.setText(currentStudent.getCurrentSem());
-        graduationDateText.setText(calculateGraduationDate());
         
-        // Set progress to 0%
-        progressBar.setProgress(0.0);
-        progressLabel.setText("0.0% Complete");
-    }
-
-    private String calculateGraduationDate() {
-        String academicLevel = currentStudent.getAcademicLevel();
-        int currentLevel;
+        // Update additional student information
+        addressText.setText(currentStudent.getAddress() != null ? currentStudent.getAddress() : "Not provided");
+        telephoneText.setText(currentStudent.getTelephone() != null ? currentStudent.getTelephone() : "Not provided");
+        emailText.setText(currentStudent.getEmail() != null ? currentStudent.getEmail() : "Not provided");
+        thesisText.setText(currentStudent.getThesis() != null ? currentStudent.getThesis() : "No thesis");
         
-        // Convert academic level text to number
-        switch (academicLevel.toLowerCase()) {
-            case "freshman":
-                currentLevel = 1;
-                break;
-            case "sophomore":
-                currentLevel = 2;
-                break;
-            case "junior":
-                currentLevel = 3;
-                break;
-            case "senior":
-                currentLevel = 4;
-                break;
-            default:
-                currentLevel = 1; // Default to freshman if unknown
-        }
-        
-        // Parse semester string (e.g., "Fall 2025")
-        String currentSemStr = currentStudent.getCurrentSem();
-        int currentSem;
-        if (currentSemStr.toLowerCase().contains("fall")) {
-            currentSem = 1;
-        } else if (currentSemStr.toLowerCase().contains("spring")) {
-            currentSem = 2;
+        // Update thesis progress
+        if (currentStudent.getThesis() != null && !currentStudent.getThesis().isEmpty()) {
+            // If student has a thesis, show their progress
+            double progress = currentStudent.getProgress() / 100.0; // Convert percentage to decimal
+            progressBar.setProgress(progress);
+            progressLabel.setText(String.format("%.1f%% Complete", currentStudent.getProgress()));
         } else {
-            currentSem = 1; // Default to Fall if unknown
+            // If student has no thesis, show 0% progress
+            progressBar.setProgress(0.0);
+            progressLabel.setText("No thesis in progress");
         }
-        
-        int remainingSemesters = (4 - currentLevel) * 2 + (2 - currentSem);
-        
-        // Assuming 4 months per semester
-        int monthsUntilGraduation = remainingSemesters * 4;
-        LocalDate graduationDate = LocalDate.now().plusMonths(monthsUntilGraduation);
-        
-        return graduationDate.format(DateTimeFormatter.ofPattern("MMMM yyyy"));
     }
 
     private void loadCoursesTable() {
Index: .idea/workspace.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project version=\"4\">\n  <component name=\"AutoImportSettings\">\n    <option name=\"autoReloadType\" value=\"SELECTIVE\" />\n  </component>\n  <component name=\"ChangeListManager\">\n    <list default=\"true\" id=\"695edb3f-5990-4e7d-9437-02fba9d60a2e\" name=\"Changes\" comment=\"pull\">\n      <change beforePath=\"$PROJECT_DIR$/.idea/workspace.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/workspace.xml\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/ManagementSystem/pom.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/ManagementSystem/pom.xml\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/ManagementSystem/src/main/java/com/example/phase1_1420/Course.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/ManagementSystem/src/main/java/com/example/phase1_1420/Course.java\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/ManagementSystem/src/main/java/com/example/phase1_1420/ExcelFile.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/ManagementSystem/src/main/java/com/example/phase1_1420/ExcelFile.java\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/ManagementSystem/src/main/java/com/example/phase1_1420/UMS_Data.xlsx\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/ManagementSystem/src/main/java/com/example/phase1_1420/UMS_Data.xlsx\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/ManagementSystem/src/main/java/com/example/phase1_1420/UserDashboardController.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/ManagementSystem/src/main/java/com/example/phase1_1420/UserDashboardController.java\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/ManagementSystem/src/main/java/com/example/phase1_1420/UserDashboardViewController.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/ManagementSystem/src/main/java/com/example/phase1_1420/UserDashboardViewController.java\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/ManagementSystem/src/main/java/module-info.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/ManagementSystem/src/main/java/module-info.java\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/ManagementSystem/src/main/resources/com/example/phase1_1420/user-dashboard-view.fxml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/ManagementSystem/src/main/resources/com/example/phase1_1420/user-dashboard-view.fxml\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/ManagementSystem/src/main/resources/com/example/phase1_1420/user-dashboard.fxml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/ManagementSystem/src/main/resources/com/example/phase1_1420/user-dashboard.fxml\" afterDir=\"false\" />\n    </list>\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\n  </component>\n  <component name=\"ExportToHTMLSettings\">\n    <option name=\"OUTPUT_DIRECTORY\" value=\"$PROJECT_DIR$/exportToHTML\" />\n  </component>\n  <component name=\"Git.Settings\">\n    <option name=\"RECENT_GIT_ROOT_PATH\" value=\"$PROJECT_DIR$\" />\n  </component>\n  <component name=\"ProblemsViewState\">\n    <option name=\"selectedTabId\" value=\"CurrentFile\" />\n  </component>\n  <component name=\"PropertiesComponent\"><![CDATA[{\n  \"keyToString\": {\n    \"Application.MainApp.executor\": \"Run\",\n    \"Application.TestExcelReading.executor\": \"Run\",\n    \"JUnit.All in ENGG1420-Group33-Phase1.executor\": \"Run\",\n    \"git-widget-placeholder\": \"main\"\n  }\n}]]></component>\n  <component name=\"RecentsManager\">\n    <key name=\"MoveFile.RECENT_KEYS\">\n      <recent name=\"$PROJECT_DIR$/ManagementSystem/src/main/resources/com/example/phase1_1420\" />\n      <recent name=\"$PROJECT_DIR$/ManagementSystem/src/main/resources\" />\n      <recent name=\"$PROJECT_DIR$/ManagementSystem/src/main/java/com/example/phase1_1420\" />\n    </key>\n  </component>\n  <component name=\"RunManager\" selected=\"Application.MainApp\">\n    <configuration name=\"MainApp\" type=\"Application\" factoryName=\"Application\" temporary=\"true\" nameIsGenerated=\"true\">\n      <option name=\"MAIN_CLASS_NAME\" value=\"com.example.phase1_1420.MainApp\" />\n      <module name=\"ENGG1420-Group33-Phase1\" />\n      <extension name=\"coverage\">\n        <pattern>\n          <option name=\"PATTERN\" value=\"com.example.phase1_1420.*\" />\n          <option name=\"ENABLED\" value=\"true\" />\n        </pattern>\n      </extension>\n      <method v=\"2\">\n        <option name=\"Make\" enabled=\"true\" />\n      </method>\n    </configuration>\n    <configuration name=\"All in ENGG1420-Group33-Phase1\" type=\"JUnit\" factoryName=\"JUnit\" temporary=\"true\" nameIsGenerated=\"true\">\n      <module name=\"ENGG1420-Group33-Phase1\" />\n      <option name=\"PACKAGE_NAME\" value=\"\" />\n      <option name=\"TEST_OBJECT\" value=\"package\" />\n      <method v=\"2\">\n        <option name=\"Make\" enabled=\"true\" />\n      </method>\n    </configuration>\n    <recent_temporary>\n      <list>\n        <item itemvalue=\"Application.MainApp\" />\n        <item itemvalue=\"JUnit.All in ENGG1420-Group33-Phase1\" />\n      </list>\n    </recent_temporary>\n  </component>\n  <component name=\"TaskManager\">\n    <task id=\"LOCAL-00001\" summary=\"pull\">\n      <option name=\"closed\" value=\"true\" />\n      <created>1743457161310</created>\n      <option name=\"number\" value=\"00001\" />\n      <option name=\"presentableId\" value=\"LOCAL-00001\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1743457161310</updated>\n    </task>\n    <option name=\"localTasksCounter\" value=\"2\" />\n    <servers />\n  </component>\n  <component name=\"Vcs.Log.Tabs.Properties\">\n    <option name=\"TAB_STATES\">\n      <map>\n        <entry key=\"MAIN\">\n          <value>\n            <State />\n          </value>\n        </entry>\n      </map>\n    </option>\n  </component>\n  <component name=\"VcsManagerConfiguration\">\n    <MESSAGE value=\"pull\" />\n    <option name=\"LAST_COMMIT_MESSAGE\" value=\"pull\" />\n  </component>\n  <component name=\"XDebuggerManager\">\n    <breakpoint-manager>\n      <breakpoints>\n        <breakpoint enabled=\"true\" type=\"java-exception\">\n          <properties class=\"java.io.FileNotFoundException\" package=\"java.io\" />\n          <option name=\"timeStamp\" value=\"1\" />\n        </breakpoint>\n      </breakpoints>\n    </breakpoint-manager>\n  </component>\n  <component name=\"com.intellij.coverage.CoverageDataManagerImpl\">\n    <SUITE FILE_PATH=\"coverage/ENGG1420G33$MainApp.ic\" NAME=\"MainApp Coverage Results\" MODIFIED=\"1743465847175\" SOURCE_PROVIDER=\"com.intellij.coverage.DefaultCoverageFileProvider\" RUNNER=\"idea\" COVERAGE_BY_TEST_ENABLED=\"false\" COVERAGE_TRACING_ENABLED=\"true\">\n      <FILTER>com.example.phase1_1420.*</FILTER>\n    </SUITE>\n  </component>\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/workspace.xml b/.idea/workspace.xml
--- a/.idea/workspace.xml	(revision 4ab3861f692e7ff3f39550df4fdd3fca57265463)
+++ b/.idea/workspace.xml	(date 1743633441431)
@@ -4,17 +4,13 @@
     <option name="autoReloadType" value="SELECTIVE" />
   </component>
   <component name="ChangeListManager">
-    <list default="true" id="695edb3f-5990-4e7d-9437-02fba9d60a2e" name="Changes" comment="pull">
+    <list default="true" id="695edb3f-5990-4e7d-9437-02fba9d60a2e" name="Changes" comment="Homepage for users (student login). display student courses and information (wip).">
       <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/ManagementSystem/pom.xml" beforeDir="false" afterPath="$PROJECT_DIR$/ManagementSystem/pom.xml" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/ManagementSystem/src/main/java/com/example/phase1_1420/Course.java" beforeDir="false" afterPath="$PROJECT_DIR$/ManagementSystem/src/main/java/com/example/phase1_1420/Course.java" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/ManagementSystem/src/main/java/com/example/phase1_1420/ExcelFile.java" beforeDir="false" afterPath="$PROJECT_DIR$/ManagementSystem/src/main/java/com/example/phase1_1420/ExcelFile.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/ManagementSystem/src/main/java/com/example/phase1_1420/UMS_Data.xlsx" beforeDir="false" afterPath="$PROJECT_DIR$/ManagementSystem/src/main/java/com/example/phase1_1420/UMS_Data.xlsx" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/ManagementSystem/src/main/java/com/example/phase1_1420/UserDashboardController.java" beforeDir="false" afterPath="$PROJECT_DIR$/ManagementSystem/src/main/java/com/example/phase1_1420/UserDashboardController.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/ManagementSystem/src/main/java/com/example/phase1_1420/Student.java" beforeDir="false" afterPath="$PROJECT_DIR$/ManagementSystem/src/main/java/com/example/phase1_1420/Student.java" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/ManagementSystem/src/main/java/com/example/phase1_1420/UserDashboardViewController.java" beforeDir="false" afterPath="$PROJECT_DIR$/ManagementSystem/src/main/java/com/example/phase1_1420/UserDashboardViewController.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/ManagementSystem/src/main/java/module-info.java" beforeDir="false" afterPath="$PROJECT_DIR$/ManagementSystem/src/main/java/module-info.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/ManagementSystem/src/main/resources/UMS_Data.xlsx" beforeDir="false" afterPath="$PROJECT_DIR$/ManagementSystem/src/main/resources/UMS_Data.xlsx" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/ManagementSystem/src/main/resources/com/example/phase1_1420/user-dashboard-view.fxml" beforeDir="false" afterPath="$PROJECT_DIR$/ManagementSystem/src/main/resources/com/example/phase1_1420/user-dashboard-view.fxml" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/ManagementSystem/src/main/resources/com/example/phase1_1420/user-dashboard.fxml" beforeDir="false" afterPath="$PROJECT_DIR$/ManagementSystem/src/main/resources/com/example/phase1_1420/user-dashboard.fxml" afterDir="false" />
     </list>
     <option name="SHOW_DIALOG" value="false" />
     <option name="HIGHLIGHT_CONFLICTS" value="true" />
@@ -83,7 +79,15 @@
       <option name="project" value="LOCAL" />
       <updated>1743457161310</updated>
     </task>
-    <option name="localTasksCounter" value="2" />
+    <task id="LOCAL-00002" summary="Homepage for users (student login). display student courses and information (wip).">
+      <option name="closed" value="true" />
+      <created>1743577498116</created>
+      <option name="number" value="00002" />
+      <option name="presentableId" value="LOCAL-00002" />
+      <option name="project" value="LOCAL" />
+      <updated>1743577498116</updated>
+    </task>
+    <option name="localTasksCounter" value="3" />
     <servers />
   </component>
   <component name="Vcs.Log.Tabs.Properties">
@@ -99,7 +103,8 @@
   </component>
   <component name="VcsManagerConfiguration">
     <MESSAGE value="pull" />
-    <option name="LAST_COMMIT_MESSAGE" value="pull" />
+    <MESSAGE value="Homepage for users (student login). display student courses and information (wip)." />
+    <option name="LAST_COMMIT_MESSAGE" value="Homepage for users (student login). display student courses and information (wip)." />
   </component>
   <component name="XDebuggerManager">
     <breakpoint-manager>
Index: ManagementSystem/src/main/resources/com/example/phase1_1420/user-dashboard-view.fxml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\n<?import javafx.scene.control.*?>\n<?import javafx.scene.layout.*?>\n<?import javafx.geometry.Insets?>\n<?import javafx.scene.text.Text?>\n<?import javafx.scene.control.*?>\n<?import javafx.scene.layout.*?>\n<?import javafx.geometry.Insets?>\n<?import javafx.scene.text.Text?>\n\n<VBox xmlns=\"http://javafx.com/javafx\"\n      xmlns:fx=\"http://javafx.com/fxml\"\n      fx:controller=\"com.example.phase1_1420.UserDashboardViewController\"\n      spacing=\"15\"\n\n      styleClass=\"dashboard-content\">\n\n    <!-- Student Information Section -->\n    <VBox spacing=\"10\" styleClass=\"info-section\">\n        <Label text=\"Student Information\" styleClass=\"section-header\" />\n        <GridPane hgap=\"10\" vgap=\"10\">\n            <Label text=\"Name:\" GridPane.columnIndex=\"0\" GridPane.rowIndex=\"0\" styleClass=\"info-label\" />\n            <Text fx:id=\"studentNameText\" GridPane.columnIndex=\"1\" GridPane.rowIndex=\"0\" styleClass=\"info-text\" />\n            \n            <Label text=\"Student ID:\" GridPane.columnIndex=\"0\" GridPane.rowIndex=\"1\" styleClass=\"info-label\" />\n            <Text fx:id=\"studentIdText\" GridPane.columnIndex=\"1\" GridPane.rowIndex=\"1\" styleClass=\"info-text\" />\n            \n            <Label text=\"Academic Level:\" GridPane.columnIndex=\"0\" GridPane.rowIndex=\"2\" styleClass=\"info-label\" />\n            <Text fx:id=\"academicLevelText\" GridPane.columnIndex=\"1\" GridPane.rowIndex=\"2\" styleClass=\"info-text\" />\n            \n            <Label text=\"Current Semester:\" GridPane.columnIndex=\"0\" GridPane.rowIndex=\"3\" styleClass=\"info-label\" />\n            <Text fx:id=\"currentSemText\" GridPane.columnIndex=\"1\" GridPane.rowIndex=\"3\" styleClass=\"info-text\" />\n            \n            <Label text=\"Expected Graduation:\" GridPane.columnIndex=\"0\" GridPane.rowIndex=\"4\" styleClass=\"info-label\" />\n            <Text fx:id=\"graduationDateText\" GridPane.columnIndex=\"1\" GridPane.rowIndex=\"4\" styleClass=\"info-text\" />\n        </GridPane>\n    </VBox>\n\n    <!-- Academic Progress Section -->\n    <VBox spacing=\"10\" styleClass=\"progress-section\">\n        <Label text=\"Academic Progress\" styleClass=\"section-header\" />\n        <ProgressBar fx:id=\"progressBar\" prefWidth=\"400\" styleClass=\"progress-bar\" />\n        <Label fx:id=\"progressLabel\" styleClass=\"progress-text\" />\n    </VBox>\n\n    <!-- Current Courses Section -->\n    <VBox spacing=\"10\" styleClass=\"courses-section\">\n        <Label text=\"Current Courses\" styleClass=\"section-header\" />\n        <TableView fx:id=\"coursesTable\" prefHeight=\"150\" styleClass=\"data-table\">\n            <columns>\n                <TableColumn fx:id=\"courseCodeColumn\" text=\"Course Code\" />\n                <TableColumn fx:id=\"courseNameColumn\" text=\"Course Name\" />\n                <TableColumn fx:id=\"instructorColumn\" text=\"Instructor\" />\n                <TableColumn fx:id=\"scheduleColumn\" text=\"Schedule\" />\n            </columns>\n        </TableView>\n    </VBox>\n\n    <!-- Registered Events Section -->\n    <VBox spacing=\"10\" styleClass=\"events-section\">\n        <Label text=\"Registered Events\" styleClass=\"section-header\" />\n        <TableView fx:id=\"eventsTable\" prefHeight=\"150\" styleClass=\"data-table\">\n            <columns>\n                <TableColumn fx:id=\"eventNameColumn\" text=\"Event Name\" />\n                <TableColumn fx:id=\"eventDateColumn\" text=\"Date\" />\n                <TableColumn fx:id=\"eventLocationColumn\" text=\"Location\" />\n            </columns>\n        </TableView>\n    </VBox>\n</VBox>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/ManagementSystem/src/main/resources/com/example/phase1_1420/user-dashboard-view.fxml b/ManagementSystem/src/main/resources/com/example/phase1_1420/user-dashboard-view.fxml
--- a/ManagementSystem/src/main/resources/com/example/phase1_1420/user-dashboard-view.fxml	(revision 4ab3861f692e7ff3f39550df4fdd3fca57265463)
+++ b/ManagementSystem/src/main/resources/com/example/phase1_1420/user-dashboard-view.fxml	(date 1743581254051)
@@ -32,14 +32,23 @@
             <Label text="Current Semester:" GridPane.columnIndex="0" GridPane.rowIndex="3" styleClass="info-label" />
             <Text fx:id="currentSemText" GridPane.columnIndex="1" GridPane.rowIndex="3" styleClass="info-text" />
             
-            <Label text="Expected Graduation:" GridPane.columnIndex="0" GridPane.rowIndex="4" styleClass="info-label" />
-            <Text fx:id="graduationDateText" GridPane.columnIndex="1" GridPane.rowIndex="4" styleClass="info-text" />
+            <Label text="Address:" GridPane.columnIndex="0" GridPane.rowIndex="4" styleClass="info-label" />
+            <Text fx:id="addressText" GridPane.columnIndex="1" GridPane.rowIndex="4" styleClass="info-text" />
+            
+            <Label text="Telephone:" GridPane.columnIndex="0" GridPane.rowIndex="5" styleClass="info-label" />
+            <Text fx:id="telephoneText" GridPane.columnIndex="1" GridPane.rowIndex="5" styleClass="info-text" />
+            
+            <Label text="Email:" GridPane.columnIndex="0" GridPane.rowIndex="6" styleClass="info-label" />
+            <Text fx:id="emailText" GridPane.columnIndex="1" GridPane.rowIndex="6" styleClass="info-text" />
+            
+            <Label text="Thesis:" GridPane.columnIndex="0" GridPane.rowIndex="7" styleClass="info-label" />
+            <Text fx:id="thesisText" GridPane.columnIndex="1" GridPane.rowIndex="7" styleClass="info-text" />
         </GridPane>
     </VBox>
 
     <!-- Academic Progress Section -->
     <VBox spacing="10" styleClass="progress-section">
-        <Label text="Academic Progress" styleClass="section-header" />
+        <Label text="Thesis Progress" styleClass="section-header" />
         <ProgressBar fx:id="progressBar" prefWidth="400" styleClass="progress-bar" />
         <Label fx:id="progressLabel" styleClass="progress-text" />
     </VBox>
